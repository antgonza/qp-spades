#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2021, Qiita development team.
#
# Distributed under the terms of the BSD 3-clause License License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click
import pandas as pd
from subprocess import run, PIPE
from os import environ
from os.path import dirname, join, expanduser
from configparser import ConfigParser

from qiita_client import QiitaClient
from qp_spades import plugin, plugin_details
from qp_spades.qp_spades import spades_to_array


def _client_connect(url):
    name = plugin_details['name']
    version = plugin_details['version']

    config = ConfigParser()
    conf_dir = environ.get(
        'QIITA_PLUGINS_DIR', join(expanduser('~'), '.qiita_plugins'))
    conf_fp = join(conf_dir, f'{name}_{version}.conf')

    with open(conf_fp, 'U') as conf_file:
        config.readfp(conf_file)
    qclient = QiitaClient(url, config.get('oauth2', 'CLIENT_ID'),
                          config.get('oauth2', 'CLIENT_SECRET'),
                          server_cert=config.get('oauth2', 'SERVER_CERT'))

    return qclient


@click.command()
@click.argument('url', required=True)
@click.argument('job_id', required=True)
@click.argument('output_dir', required=True)
def execute(url, job_id, output_dir):
    """Executes the task given by job_id and stores the output in output_dir"""
    # there are basically 2 different kinds of jobs: register (commands)
    # and everything else
    if 'register' in job_id:
        plugin(url, job_id, output_dir)
    else:
        qclient = _client_connect(url)
        job_info = qclient.get_job_info(job_id)
        parameters = job_info['parameters']

        qclient.update_job_step(
            job_id, "Step 1 of 4: Collecting info and generating submission")
        artifact_id = parameters['input']
        del parameters['input']

        # Get the artifact filepath information
        artifact_info = qclient.get("/qiita_db/artifacts/%s/" % artifact_id)
        # artifact_info['files'] returns a dict of {filetype: files} so we
        # need to parse the actual input directory and make sure it's the same
        # for all the files; it should _never_ be different but better to have
        # a test for this
        directory = {dirname(ffs) for _, fs in artifact_info['files'].items()
                     for ffs in fs}
        if len(directory) != 1:
            msg = ('There is more than one input directory [%s]; please '
                   'contact qiita.help@gmail.com' % str(directory))
            return False, None, msg
        else:
            directory = directory.pop()

        # Get the artifact metadata
        prep_info = qclient.get('/qiita_db/prep_template/%s/'
                                % artifact_info['prep_information'][0])
        df = pd.read_csv(prep_info['prep-file'], sep='\t', dtype='str',
                         na_values=[], keep_default_na=True)
        if 'run_prefix' not in df.columns:
            return False, None, 'Missing run_prefix column in your preparation'
        prefix_to_name = df.set_index('run_prefix')['sample_name'].to_dict()

        # Getting all the files from the database
        main_qsub_fp, finish_qsub_fp = spades_to_array(
            directory, output_dir, prefix_to_name, url, job_id, parameters)

        # Submitting jobs and returning id
        main_job = run(['qsub', main_qsub_fp], stdout=PIPE)
        main_job_id = main_job.stdout.decode('utf8')
        finish_job = run(['qsub', f'-W depend=afteranyarray:{main_job_id}',
                          finish_qsub_fp], stdout=PIPE)
        finish_job_id = finish_job.stdout.decode('utf8')
        print(f'{main_job_id}, {finish_job_id}')

        qclient.update_job_step(
            job_id, "Step 2 of 4: Running Spades")


if __name__ == '__main__':
    execute()
